//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBLuminanceExtraction
// {
//
//   float threshold;                   // Offset:    0 Size:     4
//   float intensity;                   // Offset:    4 Size:     4
//   float2 dummy;                      // Offset:    8 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler0                          sampler      NA          NA             s0      1 
// texture0                          texture  float4          2d             t0      1 
// CBLuminanceExtraction             cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.color.x; v1.y <- pin.color.y; v1.z <- pin.color.z; v1.w <- pin.color.w; 
//   v2.x <- pin.texcoord.x; v2.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 113 "D:\Employment_Works\Ruins of La Mer\HLSL\FilterFunctions.hlsli"
mov r0.xyz, l(0.299000,0.587000,0.114000,0)

#line 8 "D:\Employment_Works\Ruins of La Mer\HLSL\LuminanceExtractionPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, v1.xyzw  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z; r1.w <- color.w

#line 11
nop 
mov r1.xyz, r1.xyzx

#line 114 "D:\Employment_Works\Ruins of La Mer\HLSL\FilterFunctions.hlsli"
dp3 r0.x, r0.xyzx, r1.xyzx  // r0.x <- <RGB2Luminance return value>

#line 11 "D:\Employment_Works\Ruins of La Mer\HLSL\LuminanceExtractionPS.hlsl"
mov r0.x, r0.x  // r0.x <- luminance

#line 14
itof r0.y, l(0)
mov r0.z, -cb0[0].x
add r0.z, r0.z, r0.x
max r0.y, r0.z, r0.y  // r0.y <- contribution

#line 17
div r0.x, r0.y, r0.x  // r0.x <- contribution

#line 18
mul r0.x, r0.x, cb0[0].y
mul r0.xyz, r0.xxxx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 19
mov o0.xyz, r0.xyzx
mov o0.w, r1.w
ret 
// Approximately 17 instruction slots used
